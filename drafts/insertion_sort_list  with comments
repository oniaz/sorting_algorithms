#include "sort.h"

/**
 * nodeSwap - swaps two nodes, updates the pointer to the list head, and then
 * prints the list.
 * @node1: first node.
 * @node2: second node.
 * @listHead double pointer to the list head.
 *
 * Return: nothing.
 */
void nodeSwap(listint_t **node1, listint_t **node2, listint_t **listHead)
{
    listint_t *tmp;

    // printf("before\n");
    // printf("\tnode1:\n\t\t");
    // if ((*node1)->prev)
    //     printf("prev:%d - ", (*node1)->prev->n);
    // printf("node1:%d", (*node1)->n);
    // if ((*node1)->next)
    //     printf(" - next:%d\n", (*node1)->next->n);

    // printf("\tnode2:\n\t\t");
    // if ((*node2)->prev)
    //     printf("prev:%d - ", (*node2)->prev->n);
    // printf("node2:%d", (*node2)->n);
    // if ((*node2)->next)
    //     printf(" - next:%d\n", (*node2)->next->n);

    if ((*node1)->prev)
        (*node1)->prev->next = (*node2);
    if ((*node2)->next)
        (*node2)->next->prev = (*node1);

    (*node1)->next = (*node2)->next;
    (*node2)->prev = (*node1)->prev;
    (*node1)->prev = (*node2);
    (*node2)->next = (*node1);

    (tmp) = (*node1);
    (*node1) = (*node2);
    (*node2) = tmp;

    if (!(*node1)->prev)
        *listHead = (*node1);
    print_list(*listHead);

    // printf("after\n");
    // printf("\tnode1:\n\t\t");
    // if ((*node1)->prev)
    //     printf("prev:%d - ", (*node1)->prev->n);
    // printf("node1:%d", (*node1)->n);
    // if ((*node1)->next)
    //     printf(" - next:%d\n", (*node1)->next->n);

    // printf("\tnode2:\n\t\t");
    // if ((*node2)->prev)
    //     printf("prev:%d - ", (*node2)->prev->n);
    // printf("node2:%d", (*node2)->n);
    // if ((*node2)->next)
    //     printf(" - next:%d\n", (*node2)->next->n);
    // printf("----------\n");
}

/**
 * insertion_sort_list - sorts a doubly linked list of integers using the
 * insertion sort algorithm. The array gets printed after each swap.
 * @list: double pointer to the head of the list.
 *
 * Return: nothing.
 */
void insertion_sort_list(listint_t **list)
{
    listint_t *n1 = *list, *n2, *n3;

    if (!list || !*list)
        return;

    while (n1 && n1->next)
    {
        n2 = n1->next;

        if (n1->n > n2->n)
        {
            nodeSwap(&n1, &n2, list);

            while (n1 && n1->prev)
            {
                n3 = n1->prev;

                if (n3->n < n1->n || n1->n == n3->n)
                    break;

                nodeSwap(&n3, &n1, list);
                n1 = n3;
            }
        }
        n1 = n2;
    }
}
